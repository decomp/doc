message JumpTbl {
  repeated int64 table_entries = 1;
  required int32 zero_offset = 2;
}

message JumpIndexTbl {
  required bytes table_entries = 1;
  required int32 zero_offset = 2;
}

message Instruction {
  required bytes inst_bytes = 1;
  required int64 inst_addr = 2;
  optional int64 true_target = 3;
  optional int64 false_target = 4;
  required int32 inst_len = 5;
  optional int64 data_offset = 6;
  optional string ext_call_name = 7;
  optional int64 call_target = 8;
  optional int32 reloc_offset = 9;
  optional JumpTbl jump_table = 10;
  optional JumpIndexTbl jump_index_table = 11;
  optional string ext_data_name = 12;
}

message Block {
  repeated Instruction insts = 1;
  required int64 base_address = 2;
  //the block_follows list is used to rebuild the basic block CFG, so it
  //should contain the list of base_addresses for blocks following this
  //block in the CFG
  repeated int64 block_follows = 3;
}

message Function {
  repeated Block blocks = 1;
  required int64 entry_address = 2;
}

message ExternalFunction {
  enum CallingConvention {
    CallerCleanup = 0;
    CalleeCleanup = 1;
    FastCall = 2;
  }

  required string symbol_name = 1;
  required CallingConvention calling_convention = 2;
  required bool has_return = 3;
  required bool no_return = 4;
  required int32 argument_count = 5;
}

message ExternalData {
  required string symbol_name = 1;
  required int32 data_size = 2;
}


message DataSymbol {
  required int64 base_address = 1;
  required string symbol_name = 2;
}

message Data {
  required int64 base_address = 1;
  required bytes data = 2;
  repeated DataSymbol symbols = 3;
  required bool read_only = 4;
}

message EntrySymbolExtra {
  required int32 entry_argc = 1;
  required ExternalFunction.CallingConvention entry_cconv = 2;
  required bool does_return = 3;
}

message EntrySymbol {
  required string entry_name = 1;
  required int64 entry_address = 2;
  optional EntrySymbolExtra entry_extra = 3;
}

message Module {
  repeated Function internal_funcs = 1;
  repeated ExternalFunction external_funcs = 2;
  repeated Data internal_data = 3;
  required string module_name = 4;
  repeated EntrySymbol entries = 5;
  repeated ExternalData external_data = 6;
}

// The following information is used to guide the disassembley process.
// Although the information below is not required, knowing some information,
// such as but not limited to, the results of jump target set analysis will greatly improve the results of lifting.

message Edge_64 {
  required int64 value = 1;

  enum Kind {
    Unknown = 0;
    May = 1;
    Must = 2;
  }

  required Kind kind = 2;
  optional bool label = 3;
}


message Edge_32 {
  required int32 value = 1;
  enum Kind {
    Unknown = 0;
    May = 1;
    Must = 2;
  }

  required Kind kind = 2;
  optional bool label = 3;
}

message Annotated_Branch_Instruction {
  enum Branch {
    Unknown = 0;
    jmp = 1;
    ljmp = 2;
    jo = 3;
    jno = 4;
    jb = 5;
    jae = 6;
    je = 7;
    jne = 8;
    jbe = 9;
    ja = 10;
    js = 11;
    jns = 12;
    jp = 13;
    jnp = 14;
    jl = 15;
    jge = 16;
    jle = 17;
    jg = 18;
    loopne = 19;
    loope = 20;
    loop = 21;
    jCcxz = 22;
    ret = 23;
    call = 24;
  }
  required Branch branch_instr_name = 1;
  required bool is_resolved = 2;
  required bool is_indirect = 3;
  required bool is_conditional = 4;
  required bool is_leaf = 5;
  repeated Edge_64 target_to = 6;
  required Annotated_Instruction instr = 7;
  optional string abstract_expression = 8;
}


message Annotated_Instruction {
  required string instr_name = 1;
  required string instr_string = 2;
  required int64 inst_addr = 3;
  required int32 inst_len = 4;
  required int32 op_count = 5;
  optional string inst_addr_hex = 6;

  required bool is_branch_instruction = 7;

  message Operand {
    enum Operand_Type {
      Unknown = 0;
      Immediate = 1;
      Register = 2;
      Memory = 3;
      Address = 4;
    }

    required int32 pos = 1;
    required Operand_Type type = 2;	//[default = Unknown];
    optional string value = 3;
  }

  repeated Operand argument = 8;
  repeated Edge_64 referered_from = 9;
}

message Annotated_Register_32 {
  enum Register {
    Unknown = 0;
    eax = 1;
    ecx = 2;
    edx = 3;
    ebx = 4;
    esp = 5;
    ebp = 6;
    esi = 7;
    edi = 8;
    eip = 9;
    fs_base = 10;
    gs_base = 11;
    gtd = 12;
    ldt = 13;
    mxcsr = 14;
  }


  required Register name = 1;
  required int64 used_at_addr = 2;
  optional string used_at_addr_hex = 3;

  message Property {
    required bool Unknown = 1;
    optional bool Alive = 2;
  }

  repeated Edge_32 value = 7;
  required Property fact = 8;

  optional string abstract_expression = 9;
}


message Annotated_Register_64 {
  enum Register {
    Unknown = 0;
    rax = 10;
    rcx = 11;
    rdx = 12;
    rbx = 13;
    rsp = 14;
    rbp = 15;
    rsi = 16;
    rdi = 17;
    rip = 18;
    r8 = 19;
    r9 = 20;
    r10 = 21;
    r11 = 22;
    r12 = 23;
    r13 = 24;
    r14 = 25;
    r15 = 26;
    fs_base = 27;
    gs_base = 28;
    gdt = 29;
    ldt = 30;
  }

  required Register name = 1;
  required int64 used_at_addr = 2;
  optional string used_at_addr_hex = 3;

  message Property {
    required bool Unknown = 1;
    optional bool Alive = 2;
  }

  repeated Edge_64 value = 4;
  required Property fact = 5;

  optional string abstract_expression = 6;
}

message Annotated_Function {
  required string name = 1;
  required int64 start_at_addr = 2;
  optional string start_at_addr_hex = 3;

  optional int64 end_at_addr = 4;
  optional string end_at_addr_hex = 5;

  repeated Annotated_Instruction prolog = 6;
  repeated Annotated_Instruction epilog = 7;

  repeated Edge_64 referered_from = 8;
  repeated Edge_64 calls = 9;
}


message Disassembly {
  repeated Annotated_Instruction instr = 1;
  repeated Annotated_Branch_Instruction branch_instr = 2;
  repeated Annotated_Register_32 reg_32 = 3;
  repeated Annotated_Register_64 reg_64 = 4;
  repeated Annotated_Function func = 5;
}
